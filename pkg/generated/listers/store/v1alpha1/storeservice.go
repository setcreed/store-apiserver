/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/setcreed/store-apiserver/pkg/apis/store/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoreServiceLister helps list StoreServices.
// All objects returned here must be treated as read-only.
type StoreServiceLister interface {
	// List lists all StoreServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreService, err error)
	// StoreServices returns an object that can list and get StoreServices.
	StoreServices(namespace string) StoreServiceNamespaceLister
	StoreServiceListerExpansion
}

// storeServiceLister implements the StoreServiceLister interface.
type storeServiceLister struct {
	indexer cache.Indexer
}

// NewStoreServiceLister returns a new StoreServiceLister.
func NewStoreServiceLister(indexer cache.Indexer) StoreServiceLister {
	return &storeServiceLister{indexer: indexer}
}

// List lists all StoreServices in the indexer.
func (s *storeServiceLister) List(selector labels.Selector) (ret []*v1alpha1.StoreService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreService))
	})
	return ret, err
}

// StoreServices returns an object that can list and get StoreServices.
func (s *storeServiceLister) StoreServices(namespace string) StoreServiceNamespaceLister {
	return storeServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoreServiceNamespaceLister helps list and get StoreServices.
// All objects returned here must be treated as read-only.
type StoreServiceNamespaceLister interface {
	// List lists all StoreServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreService, err error)
	// Get retrieves the StoreService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StoreService, error)
	StoreServiceNamespaceListerExpansion
}

// storeServiceNamespaceLister implements the StoreServiceNamespaceLister
// interface.
type storeServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoreServices in the indexer for a given namespace.
func (s storeServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoreService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreService))
	})
	return ret, err
}

// Get retrieves the StoreService from the indexer for a given namespace and name.
func (s storeServiceNamespaceLister) Get(name string) (*v1alpha1.StoreService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storeservice"), name)
	}
	return obj.(*v1alpha1.StoreService), nil
}
